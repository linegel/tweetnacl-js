name: TweetNaCl Tests and Benchmarks

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  main-test:
    name: Main Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Run all tests
      run: yarn test
  
  test-nacl:
    name: Test nacl.js
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Run tests for nacl.js
      run: NACL_SRC=nacl.js yarn test-node
      
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: nacl-test-results
        path: |
          test/browser/_bundle.js
          test/browser/_bundle-quick.js

  test-nacl-fast:
    name: Test nacl-fast.min.js
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Run tests for nacl-fast.min.js
      run: NACL_SRC=nacl-fast.min.js yarn test-node

  benchmark-nacl:
    name: Benchmark nacl.js
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Run benchmarks for nacl.js on PR branch
      run: NACL_SRC=nacl.js yarn bench | tee bench_nacl_pr_results.txt
    
    - name: Checkout master
      run: |
        git checkout master
        yarn install --frozen-lockfile
    
    - name: Run benchmarks for nacl.js on master
      run: NACL_SRC=nacl.js yarn bench | tee bench_nacl_master_results.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: nacl-benchmark-results
        path: |
          bench_nacl_pr_results.txt
          bench_nacl_master_results.txt
    
    - name: Calculate and post benchmark comparison
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const prResults = fs.readFileSync('bench_nacl_pr_results.txt', 'utf8');
          const masterResults = fs.readFileSync('bench_nacl_master_results.txt', 'utf8');
          
          // Parse the benchmark results to extract the operations per second
          function parseResults(results) {
            const lines = results.split('\n');
            const parsedResults = {};
            
            for (const line of lines) {
              // Skip empty lines and non-benchmark lines (like "yarn run" or "Done in...")
              if (line.trim() === '' || line.startsWith('yarn') || line.startsWith('$') || line.startsWith('Done')) continue;
              
              // The format is something like:
              // "crypto_stream_xor 1K                 91567 ops           0.01 ms/op    182941.40 ops/sec    178.65 MiB/s"
              const opsPerSecMatch = line.match(/(\d+\.\d+)\s+ops\/sec/);
              if (opsPerSecMatch) {
                // Extract benchmark name by taking everything up to the first set of multiple spaces
                const benchNameMatch = line.match(/^([^\s]+(?:\s+[^\s]+)*)\s{2,}/);
                if (benchNameMatch) {
                  const benchName = benchNameMatch[1].trim();
                  const opsPerSec = parseFloat(opsPerSecMatch[1]);
                  parsedResults[benchName] = opsPerSec;
                }
              }
            }
            
            return parsedResults;
          }
          
          // Calculate deltas between PR and master
          function calculateDeltas(prResults, masterResults) {
            const deltas = {};
            
            for (const [benchmark, prValue] of Object.entries(prResults)) {
              if (masterResults[benchmark]) {
                const masterValue = masterResults[benchmark];
                const percentChange = ((prValue - masterValue) / masterValue) * 100;
                deltas[benchmark] = {
                  pr: prValue,
                  master: masterValue,
                  delta: percentChange.toFixed(2)
                };
              }
            }
            
            return deltas;
          }
          
          const parsedPrResults = parseResults(prResults);
          const parsedMasterResults = parseResults(masterResults);
          const deltas = calculateDeltas(parsedPrResults, parsedMasterResults);
          
          // Generate a markdown table with the comparison
          let comparisonTable = '| Benchmark | PR (ops/sec) | Master (ops/sec) | Change (%) |\n';
          comparisonTable += '|-----------|--------------|-----------------|------------|\n';
          
          for (const [benchmark, data] of Object.entries(deltas)) {
            const change = parseFloat(data.delta);
            let changeStr = data.delta + '%';
            
            // Add visual indicators for improvements/regressions
            if (change > 0) {
              changeStr = `+${data.delta}% ðŸŸ¢`; // Green for improvement
            } else if (change < 0) {
              changeStr = `${data.delta}% ðŸ”´`; // Red for regression
            } else {
              changeStr = `${data.delta}% âšª`; // Neutral for no change
            }
            
            comparisonTable += `| ${benchmark} | ${data.pr.toFixed(2)} | ${data.master.toFixed(2)} | ${changeStr} |\n`;
          }
          
          const comment = `## Benchmark Comparison for nacl.js
          
          ### Raw Results (PR Branch)
          \`\`\`
          ${prResults}
          \`\`\`
          
          ### Performance Delta (PR vs Master)
          ${comparisonTable}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  benchmark-nacl-fast:
    name: Benchmark nacl-fast.min.js
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'yarn'
    
    - name: Install dependencies
      run: yarn install --frozen-lockfile
    
    - name: Run benchmarks for nacl-fast.min.js on PR branch
      run: NACL_SRC=nacl-fast.min.js yarn bench | tee bench_nacl_fast_pr_results.txt
    
    - name: Checkout master
      run: |
        git checkout master
        yarn install --frozen-lockfile
    
    - name: Run benchmarks for nacl-fast.min.js on master
      run: NACL_SRC=nacl-fast.min.js yarn bench | tee bench_nacl_fast_master_results.txt
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: nacl-fast-benchmark-results
        path: |
          bench_nacl_fast_pr_results.txt
          bench_nacl_fast_master_results.txt
    
    - name: Calculate and post benchmark comparison
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const fs = require('fs');
          const prResults = fs.readFileSync('bench_nacl_fast_pr_results.txt', 'utf8');
          const masterResults = fs.readFileSync('bench_nacl_fast_master_results.txt', 'utf8');
          
          // Parse the benchmark results to extract the operations per second
          function parseResults(results) {
            const lines = results.split('\n');
            const parsedResults = {};
            
            for (const line of lines) {
              // Skip empty lines and non-benchmark lines (like "yarn run" or "Done in...")
              if (line.trim() === '' || line.startsWith('yarn') || line.startsWith('$') || line.startsWith('Done')) continue;
              
              // The format is something like:
              // "crypto_stream_xor 1K                 91567 ops           0.01 ms/op    182941.40 ops/sec    178.65 MiB/s"
              const opsPerSecMatch = line.match(/(\d+\.\d+)\s+ops\/sec/);
              if (opsPerSecMatch) {
                // Extract benchmark name by taking everything up to the first set of multiple spaces
                const benchNameMatch = line.match(/^([^\s]+(?:\s+[^\s]+)*)\s{2,}/);
                if (benchNameMatch) {
                  const benchName = benchNameMatch[1].trim();
                  const opsPerSec = parseFloat(opsPerSecMatch[1]);
                  parsedResults[benchName] = opsPerSec;
                }
              }
            }
            
            return parsedResults;
          }
          
          // Calculate deltas between PR and master
          function calculateDeltas(prResults, masterResults) {
            const deltas = {};
            
            for (const [benchmark, prValue] of Object.entries(prResults)) {
              if (masterResults[benchmark]) {
                const masterValue = masterResults[benchmark];
                const percentChange = ((prValue - masterValue) / masterValue) * 100;
                deltas[benchmark] = {
                  pr: prValue,
                  master: masterValue,
                  delta: percentChange.toFixed(2)
                };
              }
            }
            
            return deltas;
          }
          
          const parsedPrResults = parseResults(prResults);
          const parsedMasterResults = parseResults(masterResults);
          const deltas = calculateDeltas(parsedPrResults, parsedMasterResults);
          
          // Generate a markdown table with the comparison
          let comparisonTable = '| Benchmark | PR (ops/sec) | Master (ops/sec) | Change (%) |\n';
          comparisonTable += '|-----------|--------------|-----------------|------------|\n';
          
          for (const [benchmark, data] of Object.entries(deltas)) {
            const change = parseFloat(data.delta);
            let changeStr = data.delta + '%';
            
            // Add visual indicators for improvements/regressions
            if (change > 0) {
              changeStr = `+${data.delta}% ðŸŸ¢`; // Green for improvement
            } else if (change < 0) {
              changeStr = `${data.delta}% ðŸ”´`; // Red for regression
            } else {
              changeStr = `${data.delta}% âšª`; // Neutral for no change
            }
            
            comparisonTable += `| ${benchmark} | ${data.pr.toFixed(2)} | ${data.master.toFixed(2)} | ${changeStr} |\n`;
          }
          
          const comment = `## Benchmark Comparison for nacl-fast.min.js
          
          ### Raw Results (PR Branch)
          \`\`\`
          ${prResults}
          \`\`\`
          
          ### Performance Delta (PR vs Master)
          ${comparisonTable}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 